// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nexmoinc/gosrvlib/pkg/config (interfaces: Viper)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	pflag "github.com/spf13/pflag"
	viper "github.com/spf13/viper"
	io "io"
	reflect "reflect"
)

// MockViper is a mock of Viper interface.
type MockViper struct {
	ctrl     *gomock.Controller
	recorder *MockViperMockRecorder
}

// MockViperMockRecorder is the mock recorder for MockViper.
type MockViperMockRecorder struct {
	mock *MockViper
}

// NewMockViper creates a new mock instance.
func NewMockViper(ctrl *gomock.Controller) *MockViper {
	mock := &MockViper{ctrl: ctrl}
	mock.recorder = &MockViperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViper) EXPECT() *MockViperMockRecorder {
	return m.recorder
}

// AddConfigPath mocks base method.
func (m *MockViper) AddConfigPath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConfigPath", arg0)
}

// AddConfigPath indicates an expected call of AddConfigPath.
func (mr *MockViperMockRecorder) AddConfigPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfigPath", reflect.TypeOf((*MockViper)(nil).AddConfigPath), arg0)
}

// AddRemoteProvider mocks base method.
func (m *MockViper) AddRemoteProvider(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteProvider", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteProvider indicates an expected call of AddRemoteProvider.
func (mr *MockViperMockRecorder) AddRemoteProvider(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteProvider", reflect.TypeOf((*MockViper)(nil).AddRemoteProvider), arg0, arg1, arg2)
}

// AddSecureRemoteProvider mocks base method.
func (m *MockViper) AddSecureRemoteProvider(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecureRemoteProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecureRemoteProvider indicates an expected call of AddSecureRemoteProvider.
func (mr *MockViperMockRecorder) AddSecureRemoteProvider(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecureRemoteProvider", reflect.TypeOf((*MockViper)(nil).AddSecureRemoteProvider), arg0, arg1, arg2, arg3)
}

// AllKeys mocks base method.
func (m *MockViper) AllKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllKeys indicates an expected call of AllKeys.
func (mr *MockViperMockRecorder) AllKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllKeys", reflect.TypeOf((*MockViper)(nil).AllKeys))
}

// AutomaticEnv mocks base method.
func (m *MockViper) AutomaticEnv() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutomaticEnv")
}

// AutomaticEnv indicates an expected call of AutomaticEnv.
func (mr *MockViperMockRecorder) AutomaticEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutomaticEnv", reflect.TypeOf((*MockViper)(nil).AutomaticEnv))
}

// BindEnv mocks base method.
func (m *MockViper) BindEnv(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindEnv", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindEnv indicates an expected call of BindEnv.
func (mr *MockViperMockRecorder) BindEnv(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindEnv", reflect.TypeOf((*MockViper)(nil).BindEnv), arg0...)
}

// BindPFlag mocks base method.
func (m *MockViper) BindPFlag(arg0 string, arg1 *pflag.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindPFlag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPFlag indicates an expected call of BindPFlag.
func (mr *MockViperMockRecorder) BindPFlag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindPFlag", reflect.TypeOf((*MockViper)(nil).BindPFlag), arg0, arg1)
}

// Get mocks base method.
func (m *MockViper) Get(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockViperMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockViper)(nil).Get), arg0)
}

// ReadConfig mocks base method.
func (m *MockViper) ReadConfig(arg0 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockViperMockRecorder) ReadConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockViper)(nil).ReadConfig), arg0)
}

// ReadInConfig mocks base method.
func (m *MockViper) ReadInConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInConfig indicates an expected call of ReadInConfig.
func (mr *MockViperMockRecorder) ReadInConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInConfig", reflect.TypeOf((*MockViper)(nil).ReadInConfig))
}

// ReadRemoteConfig mocks base method.
func (m *MockViper) ReadRemoteConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRemoteConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadRemoteConfig indicates an expected call of ReadRemoteConfig.
func (mr *MockViperMockRecorder) ReadRemoteConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRemoteConfig", reflect.TypeOf((*MockViper)(nil).ReadRemoteConfig))
}

// SetConfigName mocks base method.
func (m *MockViper) SetConfigName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigName", arg0)
}

// SetConfigName indicates an expected call of SetConfigName.
func (mr *MockViperMockRecorder) SetConfigName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigName", reflect.TypeOf((*MockViper)(nil).SetConfigName), arg0)
}

// SetConfigType mocks base method.
func (m *MockViper) SetConfigType(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigType", arg0)
}

// SetConfigType indicates an expected call of SetConfigType.
func (mr *MockViperMockRecorder) SetConfigType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*MockViper)(nil).SetConfigType), arg0)
}

// SetDefault mocks base method.
func (m *MockViper) SetDefault(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefault", arg0, arg1)
}

// SetDefault indicates an expected call of SetDefault.
func (mr *MockViperMockRecorder) SetDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockViper)(nil).SetDefault), arg0, arg1)
}

// SetEnvPrefix mocks base method.
func (m *MockViper) SetEnvPrefix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnvPrefix", arg0)
}

// SetEnvPrefix indicates an expected call of SetEnvPrefix.
func (mr *MockViperMockRecorder) SetEnvPrefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnvPrefix", reflect.TypeOf((*MockViper)(nil).SetEnvPrefix), arg0)
}

// Unmarshal mocks base method.
func (m *MockViper) Unmarshal(arg0 interface{}, arg1 ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockViperMockRecorder) Unmarshal(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockViper)(nil).Unmarshal), varargs...)
}
